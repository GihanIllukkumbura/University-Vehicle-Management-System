<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="/table.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
  <title>Driver Details</title>
</head>
<body>
  <%- include('common/header3') %>

  <% if (refillingDetails.length > 0 || tripdata.length > 0) { 
    // Sort refillingDetails by date
    refillingDetails.sort((a, b) => a.date.toMillis() - b.date.toMillis());
  %>
    <div class="container-fluid">
      <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
          <a class="nav-link active" id="refilling-tab" data-bs-toggle="tab" href="#refilling" role="tab" aria-controls="refilling" aria-selected="true">Refilling Details</a>
        </li>
        <li class="nav-item" role="presentation">
          <a class="nav-link" id="trips-tab" data-bs-toggle="tab" href="#trips" role="tab" aria-controls="trips" aria-selected="false">Trip History</a>
        </li>
      </ul>
      <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="refilling" role="tabpanel" aria-labelledby="refilling-tab">
          <div class="card shadow mt-3">
            <div class="table-responsive table mt-2" id="dataTable-1" role="grid" aria-describedby="dataTable_info">
              <table class="table my-0 display" id="refillingTable">
                <thead>
                  <tr>
                    <th>Refill Date</th>
                    <th>Amount (L)</th>
                    <th>Cost (RS)</th>
                    <th>Reg No of vehicle</th>
                  </tr>
                </thead>
                <tbody>
                  <% refillingDetails.forEach(detail => { %>
                    <tr role="row" class="even">
                      <td><%= new Date(detail.date.toMillis()).toLocaleDateString() %></td>
                      <td><%= detail.liters %></td>
                      <td><%= detail.totalCost %></td>
                      <td><%= detail.registeredNumber %></td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
          <!-- Month selection dropdown for refilling data -->
          <div class="container-fluid mt-4">
            <div class="card shadow">
              <div class="card-body">
                <h3 class="card-title">Daily Refilling</h3>
                <div class="mb-3">
                  <label for="refillingMonthSelect" class="form-label">Select Month</label>
                  <select id="refillingMonthSelect" class="form-select">
                    <option value="">All</option>
                    <% const months = Array.from(new Set(refillingDetails.map(detail => new Date(detail.date.toMillis()).toLocaleString('default', { month: 'long', year: 'numeric' })))); %>
                    <% months.forEach(month => { %>
                      <option value="<%= month %>"><%= month %></option>
                    <% }); %>
                  </select>
                </div>
                <canvas id="dailyRefillingChart"></canvas>
              </div>
            </div>
          </div>
        </div>
        <div class="tab-pane fade" id="trips" role="tabpanel" aria-labelledby="trips-tab">
          <div class="card shadow mt-3">
            <div class="table-responsive table mt-2" id="dataTable-2" role="grid" aria-describedby="dataTable_info">
              <table class="table my-0 display" id="tripsTable">
                <thead>
                  <tr>
                    <th>Trip Date</th>
                    <th>Start</th>
                    <th>End</th>
                    <th>Distance (Km)</th>
                    <th>Duration</th>
                    <th>Vehicle Name</th>
                  </tr>
                </thead>
                <tbody>
                  <% tripdata.forEach(trip => { %>
                    <tr role="row" class="even">
                      <td><%= new Date(trip.startTime.toMillis()).toLocaleDateString() %></td>
                      <td><%= trip.startAddress %></td>
                      <td><%= trip.destinationAddress %></td>
                      <td><%= trip.distance %></td>
                      <td><%= trip.tripDuration %></td>
                      <td><%= trip.vehicleName %></td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
          <!-- Month selection dropdown for trip data -->
          <div class="container-fluid mt-4">
            <div class="card shadow">
              <div class="card-body">
                <h3 class="card-title">Monthly Trip Count</h3>
                <div class="mb-3">
                  <label for="tripMonthSelect" class="form-label">Select Month</label>
                  <select id="tripMonthSelect" class="form-select">
                    <option value="">All</option>
                    <% const tripMonths = Array.from(new Set(tripdata.map(trip => new Date(trip.startTime.toMillis()).toLocaleString('default', { month: 'long', year: 'numeric' })))); %>
                    <% tripMonths.forEach(month => { %>
                      <option value="<%= month %>"><%= month %></option>
                    <% }); %>
                  </select>
                </div>
                <canvas id="tripCountChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add data attributes to store refilling and trip details for the charts -->
    <div id="chartData"
      data-refilling-dates="<%= refillingDetails.map(detail => new Date(detail.date.toMillis()).toLocaleDateString()).join(',') %>"
      data-refilling-liters="<%= refillingDetails.map(detail => detail.liters).join(',') %>"
      data-trips="<%= JSON.stringify(tripdata.map(trip => ({ month: new Date(trip.startTime.toMillis()).toLocaleString('default', { month: 'long', year: 'numeric' }) }))) %>">
    </div>

    <footer class="bg-white sticky-footer">
      <div class="container my-auto">
        <div class="text-center my-auto copyright">
          <span>Copyright Â© Waya Vehicle</span>
        </div>
      </div>
    </footer>

    <a class="border rounded d-inline scroll-to-top" href="#page-top">
      <i class="fas fa-angle-up"></i>
    </a>
  <% } else { %>
    <p>No refilling or trip data yet.</p>
  <% } %>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      $('#refillingTable').DataTable({
        "pageLength": 5,
        "lengthMenu": [5, 10, 20, 50, 100, "All"],
        "language": {
          "info": "Showing _START_ to _END_ of _TOTAL_ entries"
        }
      });
      $('#tripsTable').DataTable({
        "pageLength": 5,
        "lengthMenu": [5, 10, 20, 50, 100, "All"],
        "language": {
          "info": "Showing _START_ to _END_ of _TOTAL_ entries"
        }
      });

      // Data for the refilling chart
      const chartDataElement = document.getElementById('chartData');
      if (chartDataElement) {
        const refillingDates = chartDataElement.getAttribute('data-refilling-dates').split(',');
        const refillingLiters = chartDataElement.getAttribute('data-refilling-liters').split(',').map(Number);
        
        const refillingCtx = document.getElementById('dailyRefillingChart').getContext('2d');
        let refillingChart;

        function updateRefillingChart(filteredDates, filteredLiters) {
          if (refillingChart) {
            refillingChart.destroy();
          }

          refillingChart = new Chart(refillingCtx, {
            type: 'line',
            data: {
              labels: filteredDates,
              datasets: [{
                label: 'Daily Refilling',
                data: filteredLiters,
                backgroundColor: 'rgba(0, 123, 255, 0.5)',
                borderColor: 'rgba(0, 123, 255, 1)',
                borderWidth: 1
              }]
            },
            options: {
              scales: {
                x: {
                  title: {
                    display: true,
                    text: 'Date'
                  }
                },
                y: {
                  title: {
                    display: true,
                    text: 'Daily Liters'
                  }
                }
              }
            }
          });
        }

        function filterRefillingDataByMonth(month) {
          if (!month) {
            updateRefillingChart(refillingDates, refillingLiters);
            return;
          }

          const filteredDates = [];
          const filteredLiters = [];

          refillingDates.forEach((date, index) => {
            const dateObj = new Date(date);
            const monthYear = dateObj.toLocaleString('default', { month: 'long', year: 'numeric' });
            if (monthYear === month) {
              filteredDates.push(date);
              filteredLiters.push(refillingLiters[index]);
            }
          });

          updateRefillingChart(filteredDates, filteredLiters);
        }

        document.getElementById('refillingMonthSelect').addEventListener('change', function() {
          const selectedMonth = this.value;
          filterRefillingDataByMonth(selectedMonth);
        });

        updateRefillingChart(refillingDates, refillingLiters);
      }

      // Data for the trip count chart
      if (chartDataElement) {
        const tripData = JSON.parse(chartDataElement.getAttribute('data-trips'));

        // Count trips per month
        const tripCountByMonth = tripData.reduce((acc, trip) => {
          acc[trip.month] = (acc[trip.month] || 0) + 1;
          return acc;
        }, {});

        const tripMonths = Object.keys(tripCountByMonth);
        const tripCounts = Object.values(tripCountByMonth);

        const tripCtx = document.getElementById('tripCountChart').getContext('2d');
        let tripCountChart;

        function updateTripCountChart(months, counts) {
          if (tripCountChart) {
            tripCountChart.destroy();
          }

          tripCountChart = new Chart(tripCtx, {
            type: 'bar',
            data: {
              labels: months,
              datasets: [{
                label: 'Number of Trips',
                data: counts,
                backgroundColor: 'rgba(75, 192, 192, 0.5)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
              }]
            },
            options: {
              scales: {
                x: {
                  title: {
                    display: true,
                    text: 'Month'
                  }
                },
                y: {
                  title: {
                    display: true,
                    text: 'Number of Trips'
                  }
                }
              }
            }
          });
        }

        document.getElementById('tripMonthSelect').addEventListener('change', function() {
          const selectedMonth = this.value;
          // Here, we simply update the chart with the original unfiltered data, effectively ignoring the selection
          updateTripCountChart(tripMonths, tripCounts);
        });

        // Initial chart rendering with all data
        updateTripCountChart(tripMonths, tripCounts);
      }
    });
  </script>
</body>
</html>
